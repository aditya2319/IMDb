{
	"name": "Name_profession_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "NameDim"
				},
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "ProfessionDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableprofessiondim",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          nconst as string,",
				"          primaryName as string,",
				"          birthYear as string,",
				"          deathYear as string,",
				"          primaryProfession as string,",
				"          knownForTitles as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> NameDim",
				"source(output(",
				"          nconst as string,",
				"          primaryName as string,",
				"          birthYear as string,",
				"          deathYear as string,",
				"          primaryProfession as string,",
				"          knownForTitles as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ProfessionDim",
				"NameDim select(mapColumn(",
				"          nconst,",
				"          primaryName,",
				"          birthYear,",
				"          deathYear,",
				"          knownForTitles",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"ProfessionDim select(mapColumn(",
				"          nconst,",
				"          Profession = primaryProfession",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(Profession = split(replace(replace(replace(Profession, \"[\", \"\"), \"]\", \"\"), \"\\\"\", \"\"), \",\")) ~> derivedColumn3",
				"derivedColumn3 foldDown(unroll(Profession),",
				"     mapColumn(",
				"          nconst,",
				"          Profession",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"select1 keyGenerate(output(NameKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"flatten2 keyGenerate(output(ProfessionKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PROFESSIONKEY as decimal(10,0),",
				"          PROFESSION as string,",
				"          NCONST as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PROFESSIONKEY = ProfessionKey,",
				"          PROFESSION = Profession,",
				"          NCONST = nconst",
				"     )) ~> sink2",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}